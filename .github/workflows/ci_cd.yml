name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Testes Automatizados
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Instalar depend√™ncias
      run: npm ci

    - name: Executar linter
      run: npm run lint

    - name: Executar testes unit√°rios
      run: npm run test

    - name: Executar testes com cobertura
      run: npm run test:cov

    - name: Upload da cobertura para Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    name: Build da Aplica√ß√£o
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Instalar depend√™ncias
      run: npm ci

    - name: Build da aplica√ß√£o
      run: npm run build

    - name: Verificar se a aplica√ß√£o inicia
      run: |
        npm run start:prod &
        sleep 10
        curl -f http://localhost:3005 || exit 1
        pkill node

  build-and-push-image:
    name: Build e Push da Imagem Docker
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: latest

    steps:
      - name: Checkout do c√≥digo
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            sa-east-1

      - name: Login no Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag e push da imagem Docker
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-ec2:
    name: Deploy para EC2
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      ECR_REGISTRY: ${{ secrets.AWS_ECR_REGISTRY }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      IMAGE_TAG: latest

    steps:
      - name: Aguardar disponibilidade da imagem no ECR
        run: sleep 10

      - name: Deploy para EC2 via SSH
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 5m
          script: |
            aws ecr get-login-password --region sa-east-1 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REGISTRY }}
            sudo docker pull ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

            sudo docker network create -d bridge omni || true

            sudo docker stop omni-api || true
            sudo docker rm   omni-api || true

            sudo docker run -d \
              --name omni-api \
              --network omni \
              -p 3005:3005 \
              -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
              -e NODE_ENV="production" \
              ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:latest

            sudo docker image prune -f

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout do c√≥digo
      uses: actions/checkout@v4

    - name: Configurar Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Instalar depend√™ncias
      run: npm ci

    - name: Executar an√°lise de qualidade
      run: |
        npm run test:cov
        
        # Verificar se a cobertura est√° acima de 70%
        COVERAGE=$(npm run test:cov 2>&1 | grep "All files" | awk '{print $10}' | sed 's/%//')
        echo "Cobertura atual: ${COVERAGE}%"
        
        if (( $(echo "$COVERAGE < 70" | bc -l) )); then
          echo "‚ùå Cobertura de testes abaixo de 70%"
          exit 1
        else
          echo "‚úÖ Cobertura de testes adequada (${COVERAGE}%)"
        fi

    - name: Comentar no PR
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          
          // Ler resultados dos testes
          let coverage = '0';
          try {
            const testOutput = execSync('npm run test:cov 2>&1', { encoding: 'utf8' });
            const match = testOutput.match(/All files.*?(\d+\.?\d*)%/);
            if (match) coverage = match[1];
          } catch (e) {
            console.log('Erro ao obter cobertura:', e.message);
          }
          
          const comment = `## üìä Relat√≥rio de Qualidade
          
          ### ‚úÖ Testes Executados
          - **Cobertura**: ${coverage}%
          - **Status**: ${coverage >= 70 ? '‚úÖ Aprovado' : '‚ùå Reprovado'}
          
          ### üìã Checklist de Qualidade
          - [x] Testes unit√°rios executados
          - [x] Linter verificado
          - [x] Build realizado com sucesso
          - [${coverage >= 70 ? 'x' : ' '}] Cobertura m√≠nima (70%)
          
          ${coverage < 70 ? '‚ö†Ô∏è **Aten√ß√£o**: A cobertura de testes est√° abaixo do m√≠nimo exigido (70%)' : ''}
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 